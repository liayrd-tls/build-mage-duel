#!/bin/bash

# Handle Ctrl+C
trap 'echo -e "\n${YELLOW}[CANCELLED]${NC} Скасування білду..."; exit 130' SIGINT

# Config file path
CONFIG_FILE="$HOME/.config/build-mage-duel/config"

# colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Variable to track if script was launched from rofi
LAUNCHED_FROM_ROFI=false

# Check if script is running in terminal
if [ ! -t 0 ]; then
    LAUNCHED_FROM_ROFI=true
    # Try to find available terminal emulator
    if command -v alacritty >/dev/null 2>&1; then
        exec alacritty -e "$0" "$@"
    elif command -v kitty >/dev/null 2>&1; then
        exec kitty -e "$0" "$@"
    elif command -v gnome-terminal >/dev/null 2>&1; then
        exec gnome-terminal -- "$0" "$@"
    elif command -v xterm >/dev/null 2>&1; then
        exec xterm -e "$0" "$@"
    else
        notify-send -u critical "Build Mage Duel" "No terminal found. Install alacritty, kitty, gnome-terminal or xterm"
        exit 1
    fi
fi

# Default values (will be overridden by config if it exists)
DEF_UNITY_EDITOR_PATH="~/Unity/Hub/Editor/6000.1.3f1/Editor/Unity"
DEF_BUILD_PATH="~/UnityProjects/Territory-Wars"
DEF_OUTPUT_PATH="~/Builds"
DEF_BUILD_NAME="mageduel-webgl"
DEF_BASE_VERSION="1.0"
DEF_START_ITERATION_VERSION=1

# Load config if exists
if [ -f "$CONFIG_FILE" ]; then
    print_status "Завантажую конфігурацію з $CONFIG_FILE"
    source "$CONFIG_FILE"
    
    # Override defaults with config values if they exist
    DEF_UNITY_EDITOR_PATH="${UNITY_EDITOR_PATH:-$DEF_UNITY_EDITOR_PATH}"
    DEF_BUILD_PATH="${BUILD_PATH:-$DEF_BUILD_PATH}"
    DEF_OUTPUT_PATH="${OUTPUT_PATH:-$DEF_OUTPUT_PATH}"
    DEF_BUILD_NAME="${BUILD_NAME:-$DEF_BUILD_NAME}"
    BASE_VERSION="${BASE_VERSION:-$DEF_BASE_VERSION}"
    START_ITERATION_VERSION="${START_ITERATION_VERSION:-$DEF_START_ITERATION_VERSION}"
else
    print_warning "Config file not found at path: $CONFIG_FILE"
    print_warning "Using default values"
fi

# function to check if Unity Editor exists
check_unity_editor() {
    local unity_path=$(eval echo $DEF_UNITY_EDITOR_PATH)
    if [ ! -f "$unity_path" ]; then
        print_error "Unity Editor not found at path: $unity_path"
        print_error "Check Unity Editor path or install Unity Hub"
        exit 1
    fi
    print_success "Unity Editor found: $unity_path"
}

# function to check if project exists
check_project() {
    local project_path=$(eval echo $DEF_BUILD_PATH)
    if [ ! -d "$project_path" ]; then
        print_error "Project not found at path: $project_path"
        exit 1
    fi
    print_success "Project found: $project_path"
}

# function to create output directory
create_output_dir() {
    local output_path=$(eval echo $DEF_OUTPUT_PATH)
    if [ ! -d "$output_path" ]; then
        print_status "Creating build directory: $output_path"
        mkdir -p "$output_path"
    fi
}

# function to update version in config
update_version_in_config() {
    local new_iteration=$((START_ITERATION_VERSION + 1))
    local temp_file=$(mktemp)
    
    print_status "Updating version to $BASE_VERSION.$new_iteration"
    
    # Read config file and update version
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ ^START_ITERATION_VERSION= ]]; then
            echo "START_ITERATION_VERSION=$new_iteration"
        else
            echo "$line"
        fi
    done < "$CONFIG_FILE" > "$temp_file"
    
    # Save changes back to config
    mv "$temp_file" "$CONFIG_FILE"
    chmod 644 "$CONFIG_FILE"
    
    # Update current version
    START_ITERATION_VERSION=$new_iteration
    print_success "Version updated: $BASE_VERSION.$START_ITERATION_VERSION"
}

# function to build WebGL
build_webgl() {
    local unity_path=$(eval echo $DEF_UNITY_EDITOR_PATH)
    local project_path=$(eval echo $DEF_BUILD_PATH)
    local output_path=$(eval echo $DEF_OUTPUT_PATH)
    local build_name=$DEF_BUILD_NAME
    local current_version="$BASE_VERSION.$START_ITERATION_VERSION"
    
    local full_output_path="$output_path/$build_name-$current_version"
    
    print_status "Starting WebGL build..."
    print_status "Project: $project_path"
    print_status "Output directory:
    
    # Unity command for WebGL build using Player Settings
    "$unity_path" \
        -batchmode \
        -nographics \
        -quit \
        -projectPath "$project_path" \
        -buildTarget WebGL \
        -executeMethod WebGLBuilder.BuildWebGL \
        -logFile "$output_path/build.log" \
        -customArgs "buildName=$DEF_BUILD_NAME-$current_version;version=$current_version;outputPath=$DEF_OUTPUT_PATH"
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        print_success "WebGL build successfully created!"
        print_success "Files are located in: $full_output_path"
        print_success "Build log: $output_path/build.log"
        
        # Check if build files were actually created
        if [ -f "$full_output_path/index.html" ]; then
            print_success "WebGL files created successfully"
            # Update version only if build was successful and files exist
            update_version_in_config

            # Send success notification
            notify-send -u normal "Build Mage Duel" "Build $current_version successfully created!\nPath: $full_output_path"
            
            # If launched from rofi, exit terminal after 3 seconds
            if [ "$LAUNCHED_FROM_ROFI" = true ]; then
                print_status "Terminal will close in 3 seconds..."
                sleep 3
                kill -9 $PPID
            fi
        else
            print_warning "WebGL files not found. Check Player Settings"
            notify-send -u critical "Build Mage Duel" "Error: WebGL files not found.\nCheck Player Settings"
        fi
    else
        print_error "Error creating build (exit code: $exit_code)"
        print_error "Check build log: $output_path/build.log"
        notify-send -u critical "Build Mage Duel" "Error creating build!\nExit code: $exit_code\nLog: $output_path/build.log"
        exit $exit_code
    fi
}

# function to show config
show_config() {
    echo "Current configuration:"
    echo "--------------------"
    echo "UNITY_EDITOR_PATH=\"$DEF_UNITY_EDITOR_PATH\""
    echo "BUILD_PATH=\"$DEF_BUILD_PATH\""
    echo "OUTPUT_PATH=\"$DEF_OUTPUT_PATH\""
    echo "BUILD_NAME=\"$DEF_BUILD_NAME\""
    echo "BASE_VERSION=\"$BASE_VERSION\""
    echo "START_ITERATION_VERSION=$START_ITERATION_VERSION"
    echo "--------------------"
}

# function to create initial config
create_config() {
    local config_dir="$HOME/.config/build-mage-duel"
    
    # Create config directory if it doesn't exist
    if [ ! -d "$config_dir" ]; then
        mkdir -p "$config_dir"
        chmod 755 "$config_dir"
    fi
    
    # Create config file with comments and placeholders
    cat > "$CONFIG_FILE" << EOL
# Unity editor path (example: ~/Unity/Hub/Editor/2020.3.1f1/Editor/Unity)
UNITY_EDITOR_PATH=""

# Build path (path to your Unity project)
BUILD_PATH=""

# Output path (where to store builds)
OUTPUT_PATH=""

# Build name (output directory name)
BUILD_NAME=""

# Version info
BASE_VERSION=""
START_ITERATION_VERSION=1
EOL
    
    chmod 644 "$CONFIG_FILE"
    print_success "Configuration file template created: $CONFIG_FILE"
    print_status "Open it in a text editor and fill in the required values"
    print_status "For example:"
    print_status "UNITY_EDITOR_PATH=\"~/Unity/Hub/Editor/6000.1.3f1/Editor/Unity\""
    print_status "BUILD_PATH=\"~/UnityProjects/Territory-Wars\""
    print_status "OUTPUT_PATH=\"~/Builds\""
    print_status "BUILD_NAME=\"mageduel-webgl\""
    print_status "BASE_VERSION=\"1.4\""
}

# function to show usage
show_usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  --show-config           Show current configuration"
    echo "  --init                  Create initial config file"
    echo ""
    echo "Configuration options:"
    echo "  --unity-path <path>     Set Unity Editor path"
    echo "  --build-path <path>     Set project path"
    echo "  --output-path <path>    Set output files path"
    echo "  --build-name <name>     Set build name"
    echo "  --base-version <ver>    Set base version (e.g., 1.4)"
    echo "  --iteration <num>       Set iteration number"
    echo ""
    echo "Note: Before first use, create config with '$0 --init'"
}

# main script
main() {
    local show_config_flag=false
    
    # parse command line arguments first
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            --init)
                create_config
                print_success "Configuration file created!"
                print_status "Now edit the file: $CONFIG_FILE"
                print_status "and fill in all required parameters"
                exit 0
                ;;
            --show-config)
                show_config_flag=true
                shift
                ;;
            --unity-path)
                update_config_value "UNITY_EDITOR_PATH" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            --build-path)
                update_config_value "BUILD_PATH" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            --output-path)
                update_config_value "OUTPUT_PATH" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            --build-name)
                update_config_value "BUILD_NAME" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            --base-version)
                update_config_value "BASE_VERSION" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            --iteration)
                update_config_value "START_ITERATION_VERSION" "$2"
                source "$CONFIG_FILE"
                shift 2
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Check if config exists (only if not creating new config)
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "Configuration file not found!"
        print_status "Create it with command: $0 --init"
        print_status "Then edit the file: $CONFIG_FILE"
        exit 1
    fi
    
    # Load config
    source "$CONFIG_FILE"
    
    # Validate required config values
    if [ -z "$UNITY_EDITOR_PATH" ] || [ -z "$BUILD_PATH" ] || [ -z "$OUTPUT_PATH" ] || [ -z "$BUILD_NAME" ] || [ -z "$BASE_VERSION" ]; then
        print_error "Not all required parameters are configured!"
        print_status "Edit the file: $CONFIG_FILE"
        print_status "Required parameters to fill:"
        [ -z "$UNITY_EDITOR_PATH" ] && print_status "- UNITY_EDITOR_PATH"
        [ -z "$BUILD_PATH" ] && print_status "- BUILD_PATH"
        [ -z "$OUTPUT_PATH" ] && print_status "- OUTPUT_PATH"
        [ -z "$BUILD_NAME" ] && print_status "- BUILD_NAME"
        [ -z "$BASE_VERSION" ] && print_status "- BASE_VERSION"
        exit 1
    fi
    
    print_status "Starting Unity WebGL build script"
    
    # check prerequisites
    check_unity_editor
    check_project
    
    # create output directory
    create_output_dir
    
    # build WebGL
    build_webgl
    
    print_success "Script completed successfully!"
}

# run main function with all arguments
main "$@"
